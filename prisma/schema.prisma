generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Plan {
  FREE
  PLUS
  LEGACY
}

enum MessageScope {
  NORMAL
  DMS
}

enum MessageType {
  EMAIL
  VIDEO
  VOICE
  FILE
}

enum ScheduleKind {
  DATE
  RECURRING
  EVENT
}

enum DeliveryStatus {
  PENDING
  QUEUED
  SENDING
  SENT
  OPENED
  BOUNCED
  FAILED
  CANCELLED
}

enum DmsStatus {
  INACTIVE
  ACTIVE
  PAUSED
}

enum DmsCycleState {
  ACTIVE
  GRACE
  PENDING_RELEASE
  RELEASED
  PAUSED
}

enum ActorType {
  USER
  SYSTEM
  EXECUTOR
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  emailVerified DateTime?
  passwordHash  String?
  mfaEnabled    Boolean   @default(false)
  plan          Plan      @default(FREE)
  timezone      String    @default("Europe/London")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts    Account[]
  sessions    Session[]
  recipients  Recipient[]
  messages    Message[]
  schedules   Schedule[]
  dmsConfig   DmsConfig?
  dmsReleases DmsRelease[]
  audits      AuditEvent[]

  @@map("users")
}

model Account {
  @@map("accounts")
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  @@map("sessions")
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  @@map("verification_tokens")
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Recipient {
  @@map("recipients")
  id        String   @id @default(cuid())
  userId    String
  email     String
  name      String?
  verified  Boolean  @default(false)
  timezone  String   @default("Europe/London")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  MessageRecipient[]
}

model Message {
  @@map("messages")
  id            String        @id @default(cuid())
  userId        String
  scope         MessageScope  @default(NORMAL)
  type          MessageType
  title         String
  cipherBlobUrl String
  thumbnailUrl  String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  user        User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipients  MessageRecipient[]
  schedule    Schedule?
  dmsRelease  DmsRelease[]
}

model MessageRecipient {
  @@map("message_recipients")
  id               String         @id @default(cuid())
  messageId        String
  recipientId      String
  deliveryStatus   DeliveryStatus @default(PENDING)
  lastAttemptAt    DateTime?
  deliveryAttempts Int            @default(0)
  openedAt         DateTime?
  bouncedAt        DateTime?
  message          Message        @relation(fields: [messageId], references: [id], onDelete: Cascade)
  recipient        Recipient      @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  logs             DeliveryLog[]
}

model DeliveryLog {
  @@map("delivery_logs")
  id                 String           @id @default(cuid())
  messageRecipientId String
  status             DeliveryStatus
  detail             String?
  providerMessageId  String?
  createdAt          DateTime         @default(now())
  messageRecipient   MessageRecipient @relation(fields: [messageRecipientId], references: [id], onDelete: Cascade)
}

model Schedule {
  @@map("schedules")
  id        String       @id @default(cuid())
  userId    String
  messageId String       @unique
  kind      ScheduleKind
  runAt     DateTime?
  rrule     String?
  timezone  String       @default("Europe/London")
  isPaused  Boolean      @default(false)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  message   Message      @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model DmsConfig {
  @@map("dms_configs")
  id                  String     @id @default(cuid())
  userId              String     @unique
  frequencyDays       Int
  graceDays           Int
  channels            Json
  escalationContactId String?
  status              DmsStatus  @default(INACTIVE)
  cooldownUntil       DateTime?
  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt
  user                User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  cycles              DmsCycle[]
}

model DmsRelease {
  @@map("dms_releases")
  id                     String   @id @default(cuid())
  userId                 String
  messageId              String
  orderIndex             Int      @default(0)
  delayAfterTriggerHours Int      @default(0)
  createdAt              DateTime @default(now())
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  message                Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model DmsCycle {
  @@map("dms_cycles")
  id            String        @id @default(cuid())
  configId      String
  nextCheckinAt DateTime
  reminders     Json
  state         DmsCycleState @default(ACTIVE)
  updatedAt     DateTime      @updatedAt
  config        DmsConfig     @relation(fields: [configId], references: [id], onDelete: Cascade)
}

model AuditEvent {
  @@map("audit_events")
  id        String    @id @default(cuid())
  userId    String
  actor     ActorType
  action    String
  meta      Json
  createdAt DateTime  @default(now())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}